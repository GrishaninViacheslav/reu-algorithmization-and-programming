// Лабораторная работа № 3
// Двумерные массивы
// Ввести размер прямоугольной матрицы и значения ее элементов.
// 14. Определить количество элементов матрицы, которые строго больше своих соседей
// (соседним элементов считается элемент, у которого индексы отличаются от индексов данного элемента не более чем на единицу).
/*
  Re: Практическое занятие. Подгруппа 1
  от Бахоуддин Хакимов - Воскресенье, 17 Май 2020, 12:06
  Вопрос насчет 14 задания.
  14. Определить количество элементов матрицы, которые строго больше своих соседей (соседним элементов считается элемент, у которого индексы отличаются от индексов данного элемента не более чем на единицу).
  А элементы которые по диагонали их с ними тоже сравнивать?
  Пример
  5 2 5
  2 3 2
  5 2 5
  мы должны сравнивать 3 с 5?
  In reply to Бахоуддин Хакимов
  Re: Практическое занятие. Подгруппа 1
  от Нина Викторовна Комлева - Воскресенье, 17 Май 2020, 12:45
  Нет, диагональные не надо сравнивать. В Вашем примере 3 сравнивается только с 2.
*/

// В тексте задания нет информации о том какие значения вводятся. Предположим, что вводятся
// целые числа в диапазоне [INT_MIN; INT_MAX]. Неопределенно как вводятся значения элементов матрицы,
// предположим что ввод происходит последовательно по строкам.

#include <iostream>
int main()
{
    unsigned rowCount, columnCount;
    int** matrix;
    unsigned counter = 0; // счетчик количества элементов матрицы, которые строго больше своих соседей
    std::cin >> rowCount >> columnCount;
    matrix = new int* [rowCount];
    for (unsigned i = 0; i < rowCount; i++)
    {
        matrix[i] = new int[columnCount];
        for (unsigned j = 0; j < columnCount; j++)
            std::cin >> matrix[i][j];
    }
    for (unsigned i = 0; i < rowCount; i++)
      for (unsigned j = (i%2)?1:0; j < columnCount; j+=2)
        if(
            (i == 0 or matrix[i][j] != matrix[i-1][j])
            and
            (i == rowCount-1 or matrix[i][j] != matrix[i+1][j])
            and
            (j == 0 or matrix[i][j] != matrix[i][j-1])
            and
            (j == columnCount-1 or matrix[i][j] != matrix[i][j+1])
          )
            counter++;
    std::cout << counter;
    return 0;
}
